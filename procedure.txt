


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Nipuna






DELIMITER //

CREATE PROCEDURE exam_enrollment_all()
BEGIN

    UPDATE exam_enrollment e
    INNER JOIN attendance_summary a 
        ON e.ST_Id = a.ST_Id 
        AND e.Course_code = a.Course_code
    SET e.Attendance_Eligible = 1
    WHERE a.Eligibility = 'Eligible';

        UPDATE exam_enrollment e
    LEFT JOIN attendance_summary a 
        ON e.ST_Id = a.ST_Id 
        AND e.Course_code = a.Course_code
    SET e.Attendance_Eligible = 0
    WHERE a.Eligibility IS NULL OR a.Eligibility != 'Eligible';


    UPDATE exam_enrollment e
    INNER JOIN student_result r 
        ON e.ST_Id = r.student_id 
        AND e.Course_code = r.course_code
    SET e.CA_Eligible = 
        CASE 
            WHEN r.CA_Marks > 20 THEN 1            
            ELSE 0                        
        END;

    UPDATE exam_enrollment e
    LEFT JOIN student_result r 
        ON e.ST_Id = r.student_id 
        AND e.Course_code = r.course_code
    SET e.CA_Eligible = 0
    WHERE r.student_id IS NULL;


   
    UPDATE exam_enrollment e
    SET e.Final_Eligible = 
        CASE 
            WHEN e.Attendance_Eligible = 1 AND e.CA_Eligible = 1 THEN 1
            ELSE 0
        END;
END//

DELIMITER ;

call exam_enrollment_all();









DELIMITER //

CREATE PROCEDURE course_enrollment_new_insert (
    IN p_ST_Id VARCHAR(20),       
    IN p_Course_code VARCHAR(15), 
     IN p_Semester VARCHAR(20))
 
BEGIN
    
    DECLARE attend BOOLEAN DEFAULT 0;
    DECLARE camark BOOLEAN DEFAULT 0;
    DECLARE finalmark BOOLEAN DEFAULT 0;

    DECLARE attend_status VARCHAR(12) DEFAULT '';
    DECLARE ca_score DECIMAL(5,2) DEFAULT NULL;

    SELECT Eligibility INTO attend_status
    FROM attendance_summary
    WHERE ST_Id = p_ST_Id AND Course_code = p_Course_code
    LIMIT 1;

    IF attend_status = 'Eligible' THEN
        SET attend = 1;
    ELSE
        SET attend = 0;  
    END IF;


  
    SELECT CA_Marks INTO ca_score
    FROM student_result
    WHERE student_id = p_ST_Id AND course_code = p_Course_code
    LIMIT 1;

    IF ca_score IS NOT NULL AND ca_score > 20 THEN
        SET camark = 1; 
    ELSE
        SET camark = 0;  
    END IF;


    
    IF attend = 1 AND camark = 1 THEN
        SET finalmark = 1;
    ELSE
        SET finalmark = 0;  
    END IF;


  
    SET @enroll_id = CONCAT(
        'EEXM_',
        REPLACE(LEFT(p_ST_Id, 10), '/', ''),  
        '_',
        LEFT(p_Course_code, 7)                
    );


    
    INSERT INTO exam_enrollment (
        Enrollment_Id,
        ST_Id,
        Semester,
        Course_code,
        Attendance_Eligible,
        CA_Eligible,
        Final_Eligible
    ) VALUES (
        @enroll_id,
        p_ST_Id,
        p_Semester,
        p_Course_code,
        attend,
        camark,
        finalmark
    );

END //

DELIMITER ;



call course_enrollment_new_insert('tg/2023/0020', 'ICT1222', 'Semester 2');






DELIMITER //

CREATE PROCEDURE getstudentresults(
    IN p_student_id VARCHAR(20)
)
BEGIN
    SELECT
            Result_Id,
             student_id,
    course_code,
             Semester,
            CA_Marks,
             Final_Marks,
             Final_Grade,
             Result_Status,
             SGPA,
           CGPA
         FROM student_result
         WHERE student_id = p_student_id
        ORDER BY course_code;
    
END //

DELIMITER ;



call getstudentresults('tg/2023/0002');




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////