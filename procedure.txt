


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Nipuna



DELIMITER //

CREATE PROCEDURE exam_enrollment_all()
BEGIN

    UPDATE exam_enrollment e
    INNER JOIN attendance_summary a 
        ON e.ST_Id = a.ST_Id 
        AND e.Course_code = a.Course_code
    SET e.Attendance_Eligible = 1
    WHERE a.Eligibility = 'Eligible';

        UPDATE exam_enrollment e
    LEFT JOIN attendance_summary a 
        ON e.ST_Id = a.ST_Id 
        AND e.Course_code = a.Course_code
    SET e.Attendance_Eligible = 0
    WHERE a.Eligibility IS NULL OR a.Eligibility != 'Eligible';


    UPDATE exam_enrollment e
    INNER JOIN student_result r 
        ON e.ST_Id = r.student_id 
        AND e.Course_code = r.course_code
    SET e.CA_Eligible = 
        CASE 
            WHEN r.CA_Marks > 20 THEN 1            
            ELSE 0                        
        END;

    UPDATE exam_enrollment e
    LEFT JOIN student_result r 
        ON e.ST_Id = r.student_id 
        AND e.Course_code = r.course_code
    SET e.CA_Eligible = 0
    WHERE r.student_id IS NULL;


   
    UPDATE exam_enrollment e
    SET e.Final_Eligible = 
        CASE 
            WHEN e.Attendance_Eligible = 1 AND e.CA_Eligible = 1 THEN 1
            ELSE 0
        END;
END//

DELIMITER ;

call exam_enrollment_all();






DELIMITER //

CREATE PROCEDURE course_enrollment_new_insert (
    IN p_ST_Id VARCHAR(20),       
    IN p_Course_code VARCHAR(15), 
     IN p_Semester VARCHAR(20))
 
BEGIN
    
    DECLARE attend BOOLEAN DEFAULT 0;
    DECLARE camark BOOLEAN DEFAULT 0;
    DECLARE finalmark BOOLEAN DEFAULT 0;

    DECLARE attend_status VARCHAR(12) DEFAULT '';
    DECLARE ca_score DECIMAL(5,2) DEFAULT NULL;

    SELECT Eligibility INTO attend_status
    FROM attendance_summary
    WHERE ST_Id = p_ST_Id AND Course_code = p_Course_code
    LIMIT 1;

    IF attend_status = 'Eligible' THEN
        SET attend = 1;
    ELSE
        SET attend = 0;  
    END IF;


    SELECT CA_Marks INTO ca_score
    FROM student_result
    WHERE student_id = p_ST_Id AND course_code = p_Course_code
    LIMIT 1;

    IF ca_score IS NOT NULL AND ca_score > 20 THEN
        SET camark = 1; 
    ELSE
        SET camark = 0;  
    END IF;


    
    IF attend = 1 AND camark = 1 THEN
        SET finalmark = 1;
    ELSE
        SET finalmark = 0;  
    END IF;


  
    SET @enroll_id = CONCAT(
        'EEXM_',
        REPLACE(LEFT(p_ST_Id, 10), '/', ''),  
        '_',
        LEFT(p_Course_code, 7)                
    );


    
    INSERT INTO exam_enrollment (
        Enrollment_Id,
        ST_Id,
        Semester,
        Course_code,
        Attendance_Eligible,
        CA_Eligible,
        Final_Eligible
    ) VALUES (
        @enroll_id,
        p_ST_Id,
        p_Semester,
        p_Course_code,
        attend,
        camark,
        finalmark
    );

END //

DELIMITER ;



call course_enrollment_new_insert('tg/2023/0020', 'ICT1222', 'Semester 2');






DELIMITER //

CREATE PROCEDURE getstudentresults(
    IN p_student_id VARCHAR(20)
)
BEGIN
    SELECT
            Result_Id,
             student_id,
    course_code,
             Semester,
            CA_Marks,
             Final_Marks,
             Final_Grade,
             Result_Status,
             SGPA,
           CGPA
         FROM student_result
         WHERE student_id = p_student_id
        ORDER BY course_code;
    
END //

DELIMITER ;

call getstudentresults('tg/2023/0002');







-- meka awilla student_id eka input ekiak widiyata aragena student register wechcha course okkama details ekka pennanawa.e  ayage comfermation ekath ekka.


DELIMITER //

CREATE PROCEDURE getstudentcourses(IN student_id VARCHAR(20))
BEGIN
    SELECT DISTINCT 
        c.Course_code,
        c.Name AS Course_Name,
        c.Type,
        c.Credit,
        c.Theory_Hours,
        c.Practical_Hours,
        c.Year AS Acedemic_year,
        c.Semester,
        c.Department_Offering,
	ce.Official_Confirmation,
	 c.Lec_Name AS Lecturer_name
       
    FROM student_course sc
    JOIN course_unit c ON sc.Course_code = c.Course_code
    join course_enrollment ce ON sc.ST_Id = ce.ST_Id
    WHERE sc.ST_Id = student_id;
END//

DELIMITER ;


call getstudentcourses('tg/2023/0006');







-- meka awilla corse code eka input eka widiyata aragena e course ekata adalawa whole batch ekema details tika pennana eka.



DELIMITER //

CREATE PROCEDURE getcoursebatchsummary(IN input_course_code VARCHAR(15))
BEGIN
    SELECT 
        student_id,
        course_code,
        Semester,
        CA_marks,
        Final_Marks,
        Final_Grade,
        Result_Status
    FROM student_result
    WHERE course_code = input_course_code
    ORDER BY student_id;
END//

DELIMITER ;


CALL getcoursebatchsummary('BST1212');







-- meka awilla student id ekai course code ekai input ekak widiyata aragena student ge exam okkogema lakunui  calculatiuons karama ena lakunui display karana eka.


DELIMITER //

CREATE PROCEDURE getstudentcoursesummary(
    IN input_student_id VARCHAR(20),
    IN input_course_code VARCHAR(15)
)
BEGIN
    SELECT 
        m.Quiz_01,
        m.Quiz_02,
        m.Quiz_03,
        m.Assessment_01,
        m.Mid_Practical,
        m.Mid_Theory,
        m.Final_Theory,
        m.Final_Practical,
        
        sr.CA_marks,
        sr.Final_Marks,
        sr.Final_Grade,
        sr.Result_Status,
        sr.SGPA,
        sr.CGPA
        
    FROM mark m
    INNER JOIN student_result sr 
        ON m.student_id = sr.student_id 
        AND m.course_code = sr.course_code
    WHERE 
        m.student_id = input_student_id
        AND m.course_code = input_course_code;
END//

DELIMITER ;



CALL getstudentcoursesummary('tg/2023/0006', 'BST1212');





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Tharupama
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


-- attendance by stid (attendance_by_stid("tg/2024/0001");)
DELIMITER //
CREATE PROCEDURE attendance_by_stid(IN p_stid VARCHAR(20))
    BEGIN
      SELECT
        a.Course_code,
        a.Session_Type,
        SUM(CASE WHEN a.Status = 'Present' THEN 1 ELSE 0 END) AS Present,
        SUM(CASE WHEN a.Status = 'Absent'  THEN 1 ELSE 0 END) AS Absent,
        COUNT(*) AS Total,
      MAX(s.Percentage) AS Percentage,
      MAX(s.Eligibility) AS Eligibility
      FROM attendance AS a
      JOIN attendance_percentage_by_hours AS s ON a.ST_Id = s.ST_Id
        AND a.Course_code = s.Course_code
      WHERE a.ST_Id = p_stid
      GROUP BY a.Course_code, a.Session_Type;
    END //

DELIMITER ;




-- attendance by stid and course id and session type ("tg/2024/0001","ICT1253","t")
DELIMITER //
CREATE PROCEDURE attendance_by_stid_cid_seperate_type(
      IN st_id VARCHAR(20),
      IN c_id VARCHAR(20),
      IN s_type VARCHAR(2)
     )
     BEGIN
    
      DECLARE se_type VARCHAR(20);
    
      IF s_type IN ('t','T') THEN
              SET se_type = 'Theory';
      ELSEIF s_type IN ('p','P') THEN
              SET se_type = 'Practical';
      ELSE
              SELECT 'Invalid input please enter (\'t\',\'T\') or (\'p\',\'P\')' AS MESSAGE;
    
      END IF;
    
      SELECT Session_Date, Week_Number, Session_Type, Status
      FROM attendance
      WHERE ST_Id = st_id
        AND Course_code = c_id
        AND Session_Type = se_type;
     END //
DELIMITER ;





--attendanse find by stid and course id ("tg/2024/0001","ICT1253")
DELIMITER //
 CREATE PROCEDURE attendance_by_stid_cid(IN st_id VARCHAR(20), IN c_id VARCHAR(20))
     BEGIN
     SELECT Session_Date,Week_Number,Session_Type,Status FROM attendance WHERE ST_Id = st_id AND
     Course_code = c_id;
     END //
DELIMITER ;





--update procedure attendance ("tg/2024/0001","ICT1253",15,"t","a")
 CREATE PROCEDURE update_attendance(
         IN in_ST_Id VARCHAR(50),
         IN in_Course_code VARCHAR(50),
         IN in_Week_Number INT,
         IN in_session_type VARCHAR(20),
         IN in_status_flag VARCHAR(5)
     )
     BEGIN
    
         DECLARE s_type VARCHAR(20);
         DECLARE new_status VARCHAR(20);
    
    
    
    
         IF in_session_type IN ('t','theory','T','Theory') THEN
             SET s_type = 'Theory';
         ELSEIF in_session_type IN ('p','practical','P','Practical') THEN
             SET s_type = 'Practical';
         ELSE
             SELECT "invalid please enter ('t','theory','T','Theory') or ('p','practical','P','Practical')" AS message;
         END IF;
    
    
    
         IF in_status_flag IN ('p','present','P','Present') THEN
             SET new_status = 'Present';
         ELSEIF in_status_flag IN ('a','absent','A','Absent') THEN
             SET new_status = 'Absent';
         ELSE
             SELECT "invalid please enter ('p','present','P','Present') or ('a','absent','A','Absent')" AS message;
         END IF;
    
    
         UPDATE attendance
         SET Status = new_status
         WHERE ST_Id = in_ST_Id
           AND Course_code = in_Course_code
           AND Week_Number = in_Week_Number
           AND Session_Type = s_type;
    
    
    
         SELECT * FROM attendance
         WHERE ST_Id = in_ST_Id
           AND Course_code = in_Course_code
           AND Week_Number = in_Week_Number
           AND Session_Type = s_type;
     END//


DELIMITER ;






--attendance summery by course id ("ICT1222")
DELIMITER //
CREATE PROCEDURE attendance_summary_by_course_id(IN c_id VARCHAR(15))
BEGIN
    SELECT
        a.ST_Id,
        a.Course_code,
        COUNT(*) as Total_Sessions,
        SUM(CASE WHEN Status = 'Present' THEN 1 ELSE 0 END) as Present,
        SUM(CASE WHEN Status = 'Absent' THEN 1 ELSE 0 END) as Absent,
        ROUND((SUM(CASE WHEN Status IN ('Present') THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) as Percentage,
        CASE
            WHEN ROUND((SUM(CASE WHEN Status IN ('Present') THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) >= 80
            THEN 'Eligible'
            ELSE 'Not Eligible'
        END as Eligibility
    FROM attendance a
    WHERE a.Course_code = c_id
    GROUP BY a.ST_Id, a.Course_code;
END //
DELIMITER ;





--show attendance untill specific day by givin registation number and course code
DELIMITER //
 CREATE PROCEDURE attendance_by_stid_cid_date(IN st_id VARCHAR(20), IN c_id VARCHAR(20), IN until_date DATE)
     BEGIN
     SELECT Session_Date,Week_Number,Session_Type,Status FROM attendance WHERE ST_Id = st_id AND
     Course_code = c_id AND Session_Date <= until_date;
     END //
DELIMITER ;






--show attendance untill specific day by givin registation number , course code and session type
drop procedure if exists attendance_by_stid_cid_seperate_type_date;
DELIMITER //
CREATE PROCEDURE attendance_by_stid_cid_seperate_type_date(
      IN st_id VARCHAR(20),
      IN c_id VARCHAR(20),
      IN s_type VARCHAR(2),
      IN until_date DATE
     )
     BEGIN
    
      DECLARE se_type VARCHAR(20);
    
      IF s_type IN ('t','T') THEN
              SET se_type = 'Theory';
      ELSEIF s_type IN ('p','P') THEN
              SET se_type = 'Practical';
      ELSE
              SELECT 'Invalid input please enter (\'t\',\'T\') or (\'p\',\'P\')' AS MESSAGE;
    
      END IF;
    
      SELECT Session_Date, Week_Number, Session_Type, Status
      FROM attendance
      WHERE ST_Id = st_id
        AND Course_code = c_id
        AND Session_Type = se_type
        AND Session_Date <= until_date;
     END //
DELIMITER ;
///////////////////////////////////////////////////////////////////////////////
end Tharupama
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ NAVEEN RASANKA\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DELIMITER //
CREATE PROCEDURE calculate_CA_marks()

BEGIN
DECLARE done BOOLEAN DEFAULT FALSE;
DECLARE quiz01 DECIMAL(5,2);
DECLARE quiz02 DECIMAL(5,2);
DECLARE quiz03 DECIMAL(5,2);
DECLARE sumOfquiz DECIMAL(5,2);
DECLARE minNum DECIMAL(5,2);
DECLARE CA_10_marks DECIMAL(5,2);



DECLARE mark_code varchar(15);
DECLARE get_course_code varchar(15);
DECLARE get_Student_Id varchar(20);

DECLARE assigment_marks DECIMAL(5,2);
DECLARE mid_theory_marks DECIMAL(5,2);
DECLARE mid_practical_marks DECIMAL(5,2);
DECLARE mark_type enum('Theory','Practical','Both');
DECLARE mid_25_marks DECIMAL(5,2);
DECLARE mid_40_marks DECIMAL(5,2);
	
DECLARE cursor01 CURSOR FOR
	SELECT student_id,course_code,Quiz_01, Quiz_02,Quiz_03, Assessment_01,Mid_Theory,Mid_Practical,Type FROM mark;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=TRUE;

OPEN cursor01;

read_loop:LOOP
		FETCH cursor01 INTO get_Student_Id , get_course_code,
		quiz01,quiz02,quiz03, assigment_marks,mid_theory_marks,mid_practical_marks,mark_type ;
	IF done THEN
		LEAVE read_loop;
	END IF;

	SET sumOfquiz=quiz01+quiz02+quiz03;
	SET minNum=LEAST(quiz01,quiz02,quiz03);
	SET sumOfquiz=sumOfquiz-minNum;
	SET CA_10_marks=(sumOfquiz/200)*10;

	SET assigment_marks=(assigment_marks/100)*5;
				

			IF mark_type='Theory' THEN 
				SET  mid_25_marks=(mid_theory_marks/100)*25;
				  
			ELSEIF mark_type='Practical' THEN
				SET  mid_25_marks=(mid_practical_marks/100)*25;	
				 
			ELSEIF mark_type='Both' THEN
				SET  mid_25_marks=((mid_theory_marks+mid_practical_marks)/200)*25;
			ELSE 
				SET  mid_25_marks=0;
									
			END IF;	

		SET  mid_40_marks=mid_25_marks+CA_10_marks+assigment_marks;


		UPDATE student_result
		SET  CA_Marks=mid_40_marks
		WHERE student_id=get_Student_Id
		AND course_code=get_course_code;


END LOOP;

CLOSE cursor01;

END//
DELIMITER ;

CALL  calculate_CA_marks();















UPDATE student_result
SET Final_Grade=NULL;

DELIMITER //

CREATE PROCEDURE calculateFinalMark()


BEGIN 

DECLARE get_ca_marks DECIMAL(5,2);
DECLARE get_theory_marks DECIMAL(5,2);
DECLARE get_practical_marks DECIMAL(5,2);
DECLARE get_type ENUM('Theory','Practical','Both');
DECLARE done BOOLEAN DEFAULT FALSE;
DECLARE get_course_id CHAR(15);
DECLARE get_student_id CHAR(15);
DECLARE get_Eligibility CHAR(15);
DECLARE grade CHAR(15);
DECLARE get_Final_grade CHAR(15);
DECLARE final_marks_60 DECIMAL(5,2);
DECLARE Final_marks DECIMAL(5,2);
DECLARE get_Confirmation CHAR(20);

DECLARE cursor01 CURSOR FOR 

SELECT  s.CA_Marks,m.Final_Theory,m.Final_Practical ,m.Type,m.course_code,m.student_id,
a.Eligibility ,s.Final_Grade,c.Official_Confirmation
FROM  student_result s
INNER JOIN  mark m ON m.student_id=s.student_id 
AND s.course_code =m.course_code 

INNER JOIN course_enrollment c ON c.ST_Id=s.student_id AND c.Course_code=s.course_code

LEFT JOIN attendance_summary a ON a.ST_Id=s.student_id AND
 a.Course_code= s.course_code ;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=TRUE;


OPEN cursor01;

read_loop:LOOP

FETCH cursor01 INTO get_ca_marks,get_theory_marks,get_practical_marks,get_type,
get_course_id, get_student_id,get_Eligibility,get_Final_grade,get_Confirmation;

IF done THEN
	LEAVE read_loop;
END IF;

IF get_Eligibility='Eligible' THEN 

	IF get_type='Theory' THEN
		SET final_marks_60=(get_theory_marks/100)*60;
	ELSEIF get_type='Practical' THEN
		SET final_marks_60=(get_practical_marks/100)*60;
	ELSEIF get_type='Both' THEN
		SET final_marks_60=((get_practical_marks+get_theory_marks)/200)*60;
	
	END IF;
ELSE 
SET final_marks_60=0;	
END IF;
	
	SET Final_marks=final_marks_60+get_ca_marks;
UPDATE student_result 
SET Final_Marks=Final_marks
WHERE student_id=get_student_id AND course_code=get_course_id;
	IF (get_Confirmation='REPEAT') THEN
			IF (Final_marks>=45)THEN
					SET grade='C';
			ELSEIF(Final_marks>=40)THEN
					SET grade='C-';
			ELSEIF(Final_marks>=35)THEN
					SET grade='D';
			ELSE
					SET grade='E';	
		END IF;
	ELSEIF (get_ca_marks <16 AND final_marks_60 < 25)THEN 
		SET grade='E(CA&ESA)';
	ELSEIF get_ca_marks <16 THEN
		SET grade='E(CA)';
	ELSEIF final_marks_60<25 THEN
		SET grade='E(ESA)';
	
	ELSEIF  (Final_marks<=100 AND  Final_marks>=85) THEN
		SET grade='A+';
	
	ELSEIF  ( Final_marks>=75) THEN
		SET grade='A';
	ELSEIF  ( Final_marks>=70) THEN
		SET grade='A-';
	ELSEIF  ( Final_marks>=65) THEN
		SET grade='B+';
	ELSEIF  ( Final_marks>=60) THEN
		SET grade='B';
	ELSEIF  ( Final_marks>=55) THEN
		SET grade='B-';
	ELSEIF  ( Final_marks>=50) THEN
		SET grade='C+';
	ELSEIF  ( Final_marks>=45) THEN
		SET grade='C';
	ELSEIF  ( Final_marks>=40) THEN
		SET grade='C-';
	ELSEIF  ( Final_marks>=35) THEN
		SET grade='D';
	ELSEIF  ( Final_marks>=0) THEN
		SET grade='E';
END IF;
	

	UPDATE  student_result
	SET Final_Grade=grade
	WHERE student_id=get_student_id AND course_code =get_course_id;

IF( grade ='E' OR grade= 'D' OR grade='C-' OR grade='E(CA&ESA)' OR grade='E(CA)' OR grade='E(ESA)') THEN
		
	UPDATE  student_result
	SET  Result_Status='REPEAT'
	WHERE student_id=get_student_id AND course_code =get_course_id;

	END IF;
END LOOP;

CLOSE cursor01;
 
	
END//

DELIMITER ;

CALL calculateFinalMark();















DELIMITER //

CREATE PROCEDURE calculateSGPA()

BEGIN

DECLARE done BOOLEAN DEFAULT FALSE;
DECLARE get_student_id VARCHAR(20);

DECLARE get_department ENUM('ICT','ET','BST');   
DECLARE get_semester VARCHAR(20);    
DECLARE get_point DECIMAL(5,2);

DECLARE get_total_point DECIMAL(5,2);
DECLARE get_total_credits DECIMAL(5,2);
DECLARE sgpa DECIMAL(5,2);
DECLARE cursor3 CURSOR FOR
SELECT DISTINCT 
s.student_id,c.Department_Offering,s.Semester 
FROM student_result s
INNER JOIN  course_unit c ON c.Course_code =s.course_code;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=TRUE;

OPEN cursor3;

read_loop:LOOP
FETCH   cursor3 INTO get_student_id,get_department,get_semester;

IF done THEN 
LEAVE read_loop;

END IF;
 SET get_total_point=0;
 SET get_total_credits=0;
SET  sgpa=0;
SELECT SUM( (
	CASE
	WHEN  s.Final_Grade='A+' THEN 
		4.0
	WHEN s.Final_Grade='A' THEN 
		4.0
	WHEN s.Final_Grade='A-' THEN 
		3.7
	WHEN s.Final_Grade='B+' THEN 
		3.3
	WHEN s.Final_Grade='B' THEN 
		3.0
	WHEN s.Final_Grade='B-' THEN 
		2.7
	WHEN s.Final_Grade='C+' THEN 
		2.3
	WHEN s.Final_Grade='C' THEN 
		2.0
	WHEN s.Final_Grade='C-' THEN 
		1.7
	WHEN s.Final_Grade='D' THEN 
		1.3
	WHEN s.Final_Grade='E' THEN 
		0.0
	ELSE 0.0
END
)*c.Credit
),SUM(c.Credit) INTO 
get_total_point,get_total_credits
FROM  student_result s
INNER JOIN course_unit c ON c.Course_code=s.course_code
WHERE s.student_id=get_student_id AND c.Department_Offering=get_department
AND s.Semester=get_semester;

IF get_total_point>0 THEN
	SET sgpa= get_total_point/get_total_credits;
ELSE 
	SET sgpa=0;
END IF;
	
SELECT get_student_id AS id,	
get_total_point AS total_point,
get_total_credits AS credits,
sgpa AS SGPA ;

	UPDATE student_result
	SET SGPA=sgpa
	WHERE student_id=get_student_id
	AND Semester=get_semester;


END LOOP;

CLOSE cursor3;
END//

DELIMITER ;

CALL calculateSGPA();











DELIMITER //

CREATE PROCEDURE calculateCGPA()

BEGIN

DECLARE done BOOLEAN DEFAULT FALSE;
DECLARE get_student_id VARCHAR(20);

DECLARE get_department ENUM('ICT','ET','BST');   
   
DECLARE get_point DECIMAL(5,2);

DECLARE get_total_point DECIMAL(5,2);
DECLARE get_total_credits DECIMAL(5,2);
DECLARE cgpa DECIMAL(5,2);
DECLARE cursor3 CURSOR FOR
SELECT DISTINCT 
s.student_id,c.Department_Offering 
FROM student_result s
INNER JOIN  course_unit c ON c.Course_code =s.course_code;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=TRUE;

OPEN cursor3;

read_loop:LOOP
FETCH   cursor3 INTO get_student_id,get_department;

IF done THEN 
LEAVE read_loop;

END IF;
 SET get_total_point=0;
 SET get_total_credits=0;
SET  cgpa=0;
SELECT SUM( (
	CASE
	WHEN  s.Final_Grade='A+' THEN 
		4.0
	WHEN s.Final_Grade='A' THEN 
		4.0
	WHEN s.Final_Grade='A-' THEN 
		3.7
	WHEN s.Final_Grade='B+' THEN 
		3.3
	WHEN s.Final_Grade='B' THEN 
		3.0
	WHEN s.Final_Grade='B-' THEN 
		2.7
	WHEN s.Final_Grade='C+' THEN 
		2.3
	WHEN s.Final_Grade='C' THEN 
		2.0
	WHEN s.Final_Grade='C-' THEN 
		1.7
	WHEN s.Final_Grade='D' THEN 
		1.3
	WHEN s.Final_Grade='E' THEN 
		0.0
	ELSE 0.0
END
)*c.Credit
),SUM(c.Credit) INTO 
get_total_point,get_total_credits
FROM  student_result s
INNER JOIN course_unit c ON c.Course_code=s.course_code
WHERE s.student_id=get_student_id AND c.Department_Offering=get_department;

IF get_total_point>0 THEN
	SET cgpa= get_total_point/get_total_credits;
ELSE 
	SET cgpa=0;
END IF;
	
SELECT get_student_id AS id,	
get_total_point AS total_point,
get_total_credits AS credits,
cgpa AS CGPA ;

	UPDATE student_result
	SET CGPA=cgpa
	WHERE student_id=get_student_id;


END LOOP;

CLOSE cursor3;
END//

DELIMITER ;

CALL calculateCGPA();



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                              Damika Sulakshana


DELIMITER //
CREATE PROCEDURE AddStudent(
    IN p_U_Id VARCHAR(20),
    IN p_Fname VARCHAR(45),
    IN p_Lname VARCHAR(45),
    IN p_Email VARCHAR(45),
    IN p_Address VARCHAR(45),
    IN p_Gender VARCHAR(10),
    IN p_Dob DATE,
    IN p_Department VARCHAR(45),
    IN p_Year INT,
    IN p_Batch INT
    )
BEGIN
    
    
    INSERT INTO user (U_Id, Fname, Lname, Email, Address, Gender, Dob, Role, Department)
    VALUES (p_U_Id, p_Fname, p_Lname, p_Email, p_Address, p_Gender, p_Dob, 'Student', p_Department);

    INSERT INTO student (Registration_No, Fname, Lname, Year, Department, Batch)
    VALUES (p_U_Id, p_Fname, p_Lname, p_Year, p_Department, p_Batch);

    
END //
DELIMITER ;


call addstudent("tg/2023/0016","Damika","Sulakshana","Damika2223@gmail.com","matara","M","2004-01-15","ICT",1,"2024");

DELIMITER //

CREATE PROCEDURE ApproveMedical(
    IN p_Medical_Id VARCHAR(10),
    IN p_Approved_By VARCHAR(20)
)
BEGIN
    DECLARE v_ST_Id VARCHAR(20);
    DECLARE v_Course_code VARCHAR(10);
    DECLARE v_Valid_From DATE;
    DECLARE v_Valid_To DATE;

    
    SELECT ST_Id, Course_code, Valid_From, Valid_To
    INTO v_ST_Id, v_Course_code, v_Valid_From, v_Valid_To
    FROM medical_record
    WHERE Medical_Id = p_Medical_Id;

    

 
    UPDATE medical_record
    SET Approve = 1,
        Approved_By = p_Approved_By
    WHERE Medical_Id = p_Medical_Id;

    
    UPDATE attendance
    SET Status = 'Present'
    WHERE ST_Id = v_ST_Id
      AND Course_code = v_Course_code
      AND Session_Date BETWEEN v_Valid_From AND v_Valid_To
      AND Status = 'Absent';
END//

DELIMITER ;




DELIMITER //

CREATE PROCEDURE SubmitMedical(
    IN p_Medical_Id VARCHAR(10),
    IN p_ST_Id VARCHAR(20),
    IN p_Course_code VARCHAR(10),
    IN p_Date_Submit DATE,
    IN p_Valid_From DATE,
    IN p_Valid_To DATE,
    IN p_Approved_By VARCHAR(20),
    IN p_Approve TINYINT 
)
BEGIN
    
    INSERT INTO medical_record (
        Medical_Id, ST_Id, Course_code, Date_Submit,
        Valid_From, Valid_To, Approve, Approved_By
    )
    VALUES (
        p_Medical_Id,
        p_ST_Id,
        p_Course_code,
        p_Date_Submit,
        p_Valid_From,
        p_Valid_To,
        p_Approve,
        p_Approved_By    );

   
    IF p_Approve = 1 THEN
        UPDATE attendance
        SET Status = 'Present'
        WHERE ST_Id = p_ST_Id
          AND Course_code = p_Course_code
          AND Session_Date BETWEEN p_Valid_From AND p_Valid_To
          AND Status = 'Absent';
    END IF;
END//

DELIMITER ;
